SET TIMEZONE='Europe/Stockholm';

DROP TABLE IF EXISTS locations CASCADE;
CREATE TABLE locations (
    id              BIGSERIAL PRIMARY KEY,
    name            VARCHAR(64) NOT NULL UNIQUE,
    title           VARCHAR(64),
    description     VARCHAR(512)
);

DROP TABLE IF EXISTS temperature_measurements CASCADE;
CREATE TABLE temperature_measurements (
    id              BIGSERIAL PRIMARY KEY,
    location        BIGINT NOT NULL,
    value           REAL NOT NULL,
    timestamp       TIMESTAMP DEFAULT NOW() NOT NULL,
    CONSTRAINT      fk_location FOREIGN KEY (location) REFERENCES locations(id)
);

DROP TABLE IF EXISTS humidity_measurements CASCADE;
CREATE TABLE humidity_measurements (
    id              BIGSERIAL PRIMARY KEY,
    location        BIGINT NOT NULL,
    value           REAL NOT NULL,
    timestamp       TIMESTAMP DEFAULT NOW() NOT NULL,
    CONSTRAINT      fk_location FOREIGN KEY (location) REFERENCES locations(id)
);

drop function if exists insert_temp;
create function insert_temp(_location varchar(64), _temp real)
returns boolean as $$
    DECLARE
    _id bigint;
    BEGIN
        _id = (select id from locations where locations.name = _location group by locations.id);
        if _id != 0 then
            insert into temperature_measurements (location, value) values (_id, _temp);
            return true;
        else
            return false;
        end if;
    END
$$ language 'plpgsql';

drop function if exists insert_hum;
create function insert_hum(_location varchar(64), _temp real)
returns boolean as $$
    DECLARE
    _id bigint;
    BEGIN
        _id = (select id from locations where locations.name = _location group by locations.id);
        if _id != 0 then
            insert into humidity_measurements (location, value) values (_id, _temp);
            return true;
        else
            return false;
        end if;
    END
$$ language 'plpgsql';

DROP VIEW IF EXISTS get_latest_temp;
CREATE VIEW get_latest_temp AS SELECT DISTINCT ON (location_id)
    temperature_measurements.location AS location_id,
    locations.name AS location_name,
    locations.title AS location_title,
    locations.description AS location_description,
    temperature_measurements.value,
    temperature_measurements.timestamp
FROM temperature_measurements
JOIN locations on locations.id = location
ORDER BY location, timestamp DESC;

DROP VIEW IF EXISTS get_latest_hum;
CREATE VIEW get_latest_hum AS SELECT DISTINCT ON (location_id)
    humidity_measurements.location AS location_id,
    locations.name AS location_name,
    locations.title AS location_title,
    locations.description AS location_description,
    humidity_measurements.value,
    humidity_measurements.timestamp
FROM humidity_measurements
JOIN locations on locations.id = location
ORDER BY location, timestamp DESC;


